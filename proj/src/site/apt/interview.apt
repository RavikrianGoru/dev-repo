Sample Interview Questions in Java
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	https://www.javatpoint.com/access-modifiers#accessoverriding
	https://www.javatpoint.com/exception-handling-with-method-overriding
	https://www.javatpoint.com/strictfp-keyword
	https://www.javatpoint.com/java-string
	https://www.javatpoint.com/immutable-string
	https://www.javatpoint.com/difference-between-string-and-stringbuffer
	https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder
	https://www.javatpoint.com/how-to-create-immutable-class
	StringTokenizer class is deprecated now. It is recommended to use split() method of String class or regex (Regular Expression). Ref https://www.javatpoint.com/string-tokenizer-in-java
	https://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries
	https://www.geeksforgeeks.org/mvc-design-pattern/
	https://howtodoinjava.com/java/multi-threading/object-vs-class-level-locking/
	https://howtodoinjava.com/java/multi-threading/executor-framework-tutorial/
	https://howtodoinjava.com/java/multi-threading/inter-thread-communication-using-piped-streams-in-java/
		
	

------Creational
Singleton:	lang-->Runtime.getRuntime()
			awt--->Desktop.getDesktop()
			lang-->System.getSecurityManager()
Prototype:  lang--> Object.clone()
Factory:	util-->Calander.getInstance(TimeZone)---UTF, GTM....
			util-->ResourceBundle.getBundle(baseName)
			text--> NumberFormat.getInstance(inLocale)
			util.concurrent---> ThreadFactory interface
Abstract Factory:
			javax---> DocumentBuilderFactory.newInstance()
					  XPathFactory.newInstance()
					  TransformerFactory.newInstance()
Builder 	StringBuilder.append()
			StringBuffer.append()
-------Structural
Adapter 	which decorates/overrides the given instance
			Arrays.asList()
			Collections.list()
			InputStreamReader
			OutputStreamWriter
Bridge		which delegates/uses the given instance
			Collections.sinpletonXXX()
			Collections.newSetFromMap()
Decorator 	which adds additional behaviour
			Collections.checkedXXX()
			Collections.synchronizedXXX()
			Collections.unmodifiableXXX()
			All subclassed of InputStream,OutputStream, Reader, Writer classes
Facade		internally uses instances of different independent abstract/interface types
Proxy		java.rmi.*
			java.lang.reflect.Proxy
Strategy	Collection.sort(-,-) Comparator
Observer	Publish/Subscriber			

OO Design principles: SOLID
	1) DRY: Dont Repeate Yourself : No duplicate code
		Abstraction: Interface/Abstract classes
		duplicate code ---> method reuse
		hardcoded values---> constants
	2) Encapsulate What changes
		S/W field Changes is constant.
		make your variables and methods private. We can changes access modifier private-->default-->protected-->publics later
	3) Open Close Design:
		classes methods should be open for extentions and close for modifcation
	4) Single Resposibility:
		a class should handle single responsibility
		for methods too
	5) Dependency injection and inversion principle:
		Spring IoC/DI, Blueprint...
	6) Use Composition over Inheritance
	7) Liskov substitution principle:
		Use Superclass type in method, it can access subclass methods.
		“Derived types must be completely substitutable for their base types”
	8) Interface segregation principle
		“Clients should not be forced to implement unnecessary methods which they will not use”
	9) Programmin for interface not for implementation
		So use interface type on variables, return types of method or argument type of methods in Java.
	10) Deligation principle
		Don't do all stuff by yourself,  delegate it to the respective class. Classical example of delegation design principle is equals() and hashCode() method in Java.

		hm.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach((a)->{System.out.println(a);});
		hm.entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())).forEach(System.out::println);
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByValue()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEach((a)->{System.out.println(a);});

		Use LinkedHashMap for collecting the result to keep the sorting intact
		
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		Map<Integer,String> hm2 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey(Comparator.reverseOrder())).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(), (e1, e2)->e1,LinkedHashMap::new));
	
		Map<EmpKey,EmpVal> emphm1=empHm.entrySet().stream().sorted(Map.Entry.<EmpKey,EmpVal>comparingByKey((k1,k2)->{return k1.getId()-k2.getId();})).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));
		Map<EmpKey,EmpVal> emphm2=empHm.entrySet().stream().filter(entry->{return entry.getValue().getSal()>15000.00d;}).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));

		hm.entrySet().stream().filter((e)->{return e.getValue()%2==0;}).count();
		hm.entrySet().stream().filter((e)->e.getValue()%2==0).count();

		Comparator<Tran> com=Comparator.comparing(Tran::getName,Comparator.nullsFirst(String::compareTo));
		Collections.sort(al,com);


Design patterns/Design Principles/MVC ,Highavailability and Integration DP examples in JEE/JDK/JRE
Factory--->Calender
Decorator--->IO
Strategy --- Comparator
DS---sorting,Searching,Hashing
Caching algo
egg break problems from multiple heights
find 5 fastest hourses from 25 given a race track that allows 5 hources to run at a time. 
shortest path algo
8 queen problem
snack and ladder

anonymous and inner classes
IO bufferstreams
cloan 
serialization/externalization/transient
generic classess and generic methods
LinkedHashSet, TreeSet, PriorityQueue, LinkedHashMap, TreeMap when to use why?
HashMap- hashing,collision, rehashing?, LoadFactor
Comparable/Comparator short object
ReentranceLock and Condition interface?
GC types and explination Custom Class Loader example?
Class Loading concept , annotation example and process
java/nio
java.net
Concurrent package
dead locks and solution for dead loacks
Jconsole threaddump analysis
fork/join framework
theads pools, latch, barrier and semaphores
GC dump analysis ,  tuning, Memory management, Tuning ways, weak and strong collections.
GC in java 8
usage of static and default methods in interface
java nio, collections
concurrency framework
code debugging
exceptions and logging frameworks
Method reference, Streams, Predicate, Function and its flavours , Reactive Stream, CompletableFeature, PredicateFunctions
Value bases sorting in hashmap
finding middle node in single linked list

XML and JSON parsing tools r libs 
Time ans space complexity of an algo balanced tree, AVL tree, Stack and queue ,Recursiion and heap
RDBMS- SQL queries, Joins,JDBC concepts Statements, PreparedStatements, ResultSet, Transactions management, DB modeling, Keys, Sequence, View,
Indexing and query Tunning?
Transaction managenet concepts optimistinc locking, atomicity , isolation levels
batch procesing in RDBMS
Stored Procedure and Trigger Two phase locking
Distributed Transaction two phase commit, Global temp tables 
NoSql vs SQlQuerying in NoSQl

ActiveMQ
RabbitMQ

JUnit and Test coverage?

Script replace a pattern in a file?
sed and awk cmds to manipulate log file.





	
	

1) How to handle shared resource in mapR jobs?
	Zk for small shared data and DistributedCache for large data.

2) What will happens when you run >java Test?
	1) JVM starts
	2) JVM creates & starts main thread
	3) main thread loads Test.class
	4) Main thread executes public static void main(String... args) of Test calls if available
			if not it will executes main method of its parent class
	5) Unloads Test.class
	6) Terminates Main thread
	7) Shoutdown JVM


3) What are the different ways to create an object in Java?
	1) By new keyword						Employee emp1 = new Employee();
	2) By clone() method					Employee emp4 = (Employee) emp3.clone();
	3) By deserialization					ObjectInputStream in = new ObjectInputStream(new FileInputStream("data.obj"));
											Employee emp5 = (Employee) in.readObject();
	
	*) By newInstance() method				Employee emp2 = (Employee) Class.forName("org.programming.mitra.exercises.Employee").newInstance();
											
											or Employee emp2 = Employee.class.newInstance();
											
											or Constructor<Employee> constructor = Employee.class.getConstructor();
											Employee emp3 = constructor.newInstance();
											
	*) By factory method etc----it internally uses new key word.
	* Actually, 3 ways to create objects.(new keyword, clone() and deserialization).

4) Difference b/w new and netInstance():
	new 
		- operator, used to create object/instance of a class
		- if we know class at begining then it can be used.
		- if no corresponding .class then NoClassDefFoundError at run time.

	newInstance()
		- is a method in Class.class used to create an object/instanct by passing Class name at runtime
		- Object obj = Class.forName("java.lang.String").newInstance();
		- if .class not available at runtime throws ClassNotFoundException

5) Difference between instanceof and isInstsnce:
	instanceof
		- operator, used to check given object is particular type or not.
		- String s = "Ravi"
			if (s instsnceof String || s instanceof Object)
				System.out.print("Hi");
	isInstance:
		- isInstance() method , Available in Class.clss used to check the given object is of particular type or not. Type is available at runtime.

6) Difference between NoClassDefFoundError and ClassNotFoundException

	NoClassDefFoundError
		- Unchecked Exception
		- Test t = new Test(); if Test.class is not available at runtime.
		- Class Name hardcoded in program
	ClassNotFoundException
		- Checked Exception
		- Object obj = Class.forName("Test").netInstance(); if Test.class is not available at runtime.
		- Class Name is passed dynamically

7) Shallow and Deep copy:
	Cloning is a process of creating an exact copy of an existing object in the memory.
	The objects which implement Cloneable interface are only eligible for cloning process.
	
* Shallow Copy:
		The default version of clone() method creates the shallow copy of an object. 
		The shallow copy of an object will have exact copy of all the fields of original object. 

		If original object has any references to other objects as fields, then only references of those objects are copied into clone object, copy of those objects are not created.
		 
		Shallow copy is not 100% disjoint from original object. 
		Shallow copy is not 100% independent of original object.
		Any changes made to clone object will be reflected in original object or vice-versa.
		protected Object clone() throws CloneNotSupportedException
    	{
    	    return super.clone();
    	}

* Deep Copy:
		Deep copy of an object will have exact copy of all the fields of original object just like shallow copy. 
		But in additional, if original object has any references to other objects as fields, then copy of those objects are also created by calling clone() method on them.
		
		That means clone object and original object will be 100% disjoint. 
		They will be 100% independent of each other.
		Any changes made to clone object will not be reflected in original object or vice-versa.
	 

7) Why String is immutable in java?
	1) String pool is possible as String is immutable. it saves a lot of heap memory.
	2) Security threats: if String is not immutable. Socket programming(host and port) and to get DB connection(username and pwd) as Strings. Since String is immutable value can not be changed.
	3) Thread-safety: As String is immutable it can be shared across thread without any synchronization.
	4) String are used in classloaders, no one change the class name as String is immutable.
	5) String is immutable and hashcode is generated at the time of String creation.There is no need to calculate hash code again.
	   String type the best suitable type for key in HashMap.

8) Immutable class and custom immutable class 
  	
  	"An object is considered immutable if its state cannot change after it is constructed".
  	Simply an immutable class is a class whose properties can not be modified after creation.
  	
  	Advantages:
  		1) Immutable classes are great for concurrent applications.(thread-safe)
  		2) More error resistant and secure due to the immutability.
  		
  	Steps to create immtutable class:
  		1) final class : can not be extended.
  		2) Make all fields private and final  
  		3) No setters
  		4) Initialize fields via constructor

9)  ClassLoader Java ClassLoader loads a java class file into java virtual machine.
 	
 	Ref: https://javapapers.com/core-java/java-class-loader/

	1  Bootstrap class loader: Every JVM implements this loader.
		It loads core java API classes from <JAVA_HOME/jre/lib directory>(bootstrap path).
		Bootstrap class loader loads java’s core classes like java.lang, java.util etc.
		
		<This is implemented by native languages like C C++.>
								
	2  Extension class loader: Child of Bootstrap class loader. implemented by java.
		It loads classes form <JAVA_HOME/jre/lib/ext> or any other path specified by <java.ext.dirs> path
		
		JVM implemented extension class loader is <sun.misc.Launcher$ExtClassLoader> class.
								
	3  System/Application class loader:It is child of extension class loader.
		It loads classes from <application path> or any other from environment variable <java.class.path>.
		
		JVM implemented extension class loader is <sun.misc.Launcher$AppClassLoader> class.
	
	We can see more class loaders like java.net.URLClassLoader, java.security.SecureClassLoader etc. Those are all extended from java.lang.ClassLoader

	These class loaders have a hierarchical relationship among them. Class loader can load classes from one level above its hierarchy. 
	First level is bootstrap class loader, second level is extensions class loader and third level is system class loader.	

10) Difference between JDK, JRE, and JVM https://www.javatpoint.com/difference-between-jdk-jre-and-jvm
	
11) JVN architecture/ internals https://www.javatpoint.com/internal-details-of-jvm

12) Queue implementation PriorityQueue and ArrayDeque
		
	PriorityQueue: FIFO
		- no null
		- Not thread-safe for thread-safe use java.util.concurrent.PriorityBlockingQueue
		- Comparable Natural ordering (sorted) & can be custom Comparator order

		- offer(-)		insert element into queue
		- add(-)		insert element into queue

		- element()  	retrieves head element but does not remove throws NullPointerException if empty
		- peek()		retrieves head element but does not remove returns null if empty
		
		- remove()		removes head element & returns. throws exception if empty.
		- poll()		removes head element & returns. returns null if empty.
		
		* pop() is not available
		
	ArrayDeque: FIFO 
		- insertion and deletion both ends
		- ArrayDeque is faster than ArrayList and Stack and has no capacity restrictions.
		- no null
		- no order or not sorted
		- not thread-safe
		
		- add(-)
		- addFirst(-)
		- addLast(-)

		- offer(-)
		- offerFirst(-)
		- offerLast(-)
		
		- element()
		- peek()
		- peekFirst()
		- peekLast()
		- getFirst()
		- getLast()

		- poll()
		- pollFirst()
		- pollLast()

		- remove()
		- removeFirst()
		- removeLast()
		 
13) List---
	ArrayList(AbstractList List) good at read operations (frequently) bad at manipulation (frequently)
		* insertion order, duplicate, non-sync, 
		-- for loop by index
		-- iterator
		-- listiterator
		-- foreach  for(Type obj:list)
		-- al.forEach((each)->{System.out.println(each);});
		-- al.iterator().forEachRemaining((each)->{System.out.println(each);});
	
	LinkedList(AbstractList List and Deque) good at manipulation(frequently) bad at reading(frequently)
		* insertion order, duplicate, non-sync, used as list, stack and queue
		
	HashSet(AbstractSet and Set) based on hasting. good at search operations. 16 default capacity, 0.75 load factor.
		* no insertion order, unique, only one null, non-sync
		-- set.add(-) returns true/false.
		-- hs.removeIf(each->each!=null&&each.contains("Kumar"));
		-- hs.removeIf(each->each!=null&&!each.endsWith("vi"));
		
	LinkedHashSet(Hastable and linked list implementation)
		* maintains insertion order.
		
	TreeSet(Set and red-block tree algo) 
		* access and retrieval times are quiet fast, no null, non-sync, sorted order.
		* To add user-defined objects in TreeSet, you need to implement the Comparable interface. else ClassCastException 
		* if public int compareTo(-) method returs 0 then element would be equal then will not be added. 
		* else Exception in thread "main" java.lang.ClassCastException: Student cannot be cast to java.lang.Comparable
		
		-- System.out.println(ts.ceiling("Ra"));//equal or closest greater element or null if no such element in TreeSet
		-- System.out.println(ts.floor("Ra"));//equal or closest least element or null if no such element in TreeSet
		-- headSet(-)
		-- tailSet(-)
		-- first()
		-- last()
		-- ts.iterator()
		-- ts.decendingIterator()
		-- pollFirst()
		-- pollLast()
		-- set.headSet("C", true)
		-- set.subSet("A", false, "E", true)
		-- set.tailSet("C", false)
		
14) Queue interface: FIFO
	
		-- add(-)
		-- offer(-)
		
		-- remove()
		-- poll()					removes the head of queue and null if empty
		
		-- element()
		-- peek()					retrieves head will not remove , null if queue is empty.
		
	PriorityQueue: But it does not orders the elements in FIFO manner. It inherits AbstractQueue class.
		* not in FIFO order, order in Comparable implementation
		* Non-sync
		* No null,
		* To add user-defined objects in PriorityQueue, you need to implement the Comparable interface. else ClassCastException 
		* override equals and hashcode methods for Custom class

15) Deque interface: insertion and deletion at both ends. Double ended queue.

	ArrayDeque:The ArrayDeque class provides the facility of using deque and resizable-array
		* The elements in FIFO manner.
		* both end operations
		* No nulls
		* Not thread safe(non-sync)
		* ArrayDeque is faster than LinkedList and Stack.
		* Custom objects should implements equals method
 		
		
				
16) HashMap<Integer,String> hm = new HashMap<Integer,String>();

	 * If you override the equals() method, then it is mandatory to override the hashCode() method.
	 	Index = hashcode(Key) & (n-1)
	 	Index = 2657860 & (16-1) = 4  
		Node
		{
			int hash
			T key
			V value
			Node next
		}
	* Hashing: an integer representation object, Process of converting an object into Integer value.
	* Hashing Collision: if hash code(index) for two or more objects same then it is called hash collision.
	*  	 	  
HashMap sorting:
		hm.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach((a)->{System.out.println(a);});
		hm.entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())).forEach(System.out::println);
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByValue()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEach((a)->{System.out.println(a);});

		Use LinkedHashMap for collecting the result to keep the sorting intact
		
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		Map<Integer,String> hm2 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey(Comparator.reverseOrder())).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(), (e1, e2)->e1,LinkedHashMap::new));
	
		Map<EmpKey,EmpVal> emphm1=empHm.entrySet().stream().sorted(Map.Entry.<EmpKey,EmpVal>comparingByKey((k1,k2)->{return k1.getId()-k2.getId();})).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));
		Map<EmpKey,EmpVal> emphm2=empHm.entrySet().stream().filter(entry->{return entry.getValue().getSal()>15000.00d;}).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));

	FunctionalInterfaces
	====================
	Consmer
		void accept(T t);
		al.forEach((each)->{System.out.println(each);});
		al.iterator().forEachRemaining((each)->{System.out.println(each);});

	Predicate	
		boolean test(T t);
		hs.removeIf(each->each!=null&&each.contains("Kumar"));
		hs.removeIf(each->each!=null&&!each.endsWith("vi"));

	Comparator<T>
		int compare(T o1, T o2);
	
17) LinkedHashMap:
	* insertion order
	
18) TreeMap:
	Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order.
	map.headMap(102);  
    map.tailMap(102);  
	map.subMap(100, 102);
	
19) Hashtable 11, 0.75
	* sync
	* no null key, no null value
	    

20) 
	class MyGeneric<T>
	{
		T obj;
		public void add(T obj)
		{
			this.obj=obj;
		}
	
		public T get()
		{
			return obj;
		}
	}		

	
21) java 1.5---> Executor, semaphore, mutex, barrier, latches, concurrent collections and blocking queues;
	java 1.7---> JDK 1.7 added support for ForkJoinPool which implemented work-stealing technique to maximize the throughput.
	java 1.8--->  CompletableFuture and CompletionException.
	
22) Java Compare and Swap Example – CAS Algorithm

23) finding middle node in single linked list:
Method2)
	p1 moves 1 step at a time
	p2 moves 2 steps at a time
	when p2 points to null p1 points to mid.

Method1)
	1st time iterate and count no of nodes.
	2nd time count/2 is the mid

24) Value bases sorting in hashmap
		hm.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach((a)->{System.out.println(a);});
		hm.entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())).forEach(System.out::println);
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByValue()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		hm.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEach((a)->{System.out.println(a);});

		Use LinkedHashMap for collecting the result to keep the sorting intact
		
		Map<Integer,String> hm1 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey()).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1,LinkedHashMap::new));
		Map<Integer,String> hm2 = hm.entrySet().stream().sorted(Map.Entry.<Integer,String>comparingByKey(Comparator.reverseOrder())).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(), (e1, e2)->e1,LinkedHashMap::new));
	
		Map<EmpKey,EmpVal> emphm1=empHm.entrySet().stream().sorted(Map.Entry.<EmpKey,EmpVal>comparingByKey((k1,k2)->{return k1.getId()-k2.getId();})).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));
		Map<EmpKey,EmpVal> emphm2=empHm.entrySet().stream().filter(entry->{return entry.getValue().getSal()>15000.00d;}).collect(Collectors.toMap(e->e.getKey(), e->e.getValue(),(e1,e2)->e1, LinkedHashMap::new));

		hm.entrySet().stream().filter((e)->{return e.getValue()%2==0;}).count();
		hm.entrySet().stream().filter((e)->e.getValue()%2==0).count();

		Comparator<Tran> com=Comparator.comparing(Tran::getName,Comparator.nullsFirst(String::compareTo));
		Collections.sort(al,com);

25) OO Design principles: SOLID
	1) DRY: Dont Repeate Yourself : No duplicate code
		Abstraction: Interface/Abstract classes
		duplicate code ---> method reuse
		hardcoded values---> constants
	2) Encapsulate What changes
		S/W field Changes is constant.
		make your variables and methods private. We can changes access modifier private-->default-->protected-->publics later
	3) Open Close Design:
		classes methods should be open for extentions and close for modifcation
	4) Single Resposibility:
		a class should handle single responsibility
		for methods too
	5) Dependency injection and inversion principle:
		Spring IoC/DI, Blueprint...
	6) Use Composition over Inheritance
	7) Liskov substitution principle:
		Use Superclass type in method, it can access subclass methods.
		“Derived types must be completely substitutable for their base types”
	8) Interface segregation principle
		“Clients should not be forced to implement unnecessary methods which they will not use”
	9) Programmin for interface not for implementation
		So use interface type on variables, return types of method or argument type of methods in Java.
	10) Deligation principle
		Don't do all stuff by yourself,  delegate it to the respective class. Classical example of delegation design principle is equals() and hashCode() method in Java.

 	
26)
public class DemoClass
{
    private final static Object lock = new Object();
 
    public void demoMethod()
    {
        //Lock object is static
        synchronized (lock)
        {
            //other thread safe code
        }
    }
}		

27) https://howtodoinjava.com/java/multi-threading/object-vs-class-level-locking/

*	Java synchronized keyword is re-entrant in nature it means if a synchronized method calls another synchronized method which requires same lock then 
	current thread which is holding lock can enter into that method without acquiring lock.		 
* 	Do not synchronize on non final field on synchronized block in Java. because reference of non final field may change any time and then different thread might synchronizing on different objects i.e. no synchronization at all.
*	Do not use String literals because they might be referenced else where in the application and can cause deadlock. String objects created with new keyword can be used safely. 
	But as a best practice, create a new private scoped Object instance OR lock on the shared variable itself which we want to protect.		
	
	private final Object obj = new Object();
	
28) https://howtodoinjava.com/java/multi-threading/java-runnable-vs-thread/
	
*	Implementing Runnable is the preferred way to do it. Here, you’re not really specializing or modifying the thread’s behavior. You’re just giving the thread something to run. That means composition is the better way to go.
*	Java only supports single inheritance, so you can only extend one class.
* 	Instantiating an interface gives a cleaner separation between your code and the implementation of threads.
*	Implementing Runnable makes your class more flexible. If you extend Thread then the action you’re doing is always going to be in a thread. However, if you implement Runnable it doesn’t have to be. You can run it in a thread,
	or pass it to some kind of executor service, or just pass it around as a task within a single threaded application.

29) Programmers using concurrency classes will feel a lot more confident than programmers directly handling synchronization stuff using wait(), notify() and notifyAll() method calls. 
	I will also recommend to use these newer APIs over synchronization yourself
	
	https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/
		
30) wait(): It tells the calling thread to give up the lock and go to sleep until some other thread enters the same monitor and calls notify(). 
			The wait() method is actually tightly integrated with the synchronization lock.
	
synchronized( lockObject )
{
    while( ! condition )
    {
        lockObject.wait();
    }
     
    //take the action here;
}	
			
31) notify(): It wakes up one single thread that called wait() on the same object. It should be noted that calling notify() does not actually give up a lock on a resource.
			  It tells a waiting thread that that thread can wake up. However, the lock is not actually given up until the notifier’s synchronized block has completed.

synchronized(lockObject)
{
    //establish_the_condition;
 
    lockObject.notify();
     
    //any additional code if needed
}

32) notifyAll(): It wakes up all the threads that called wait() on the same object. The highest priority thread will run first in most of the situation, though not guaranteed. Other things are same as notify() method above.

synchronized(lockObject)
{
    establish_the_condition;
 
    lockObject.notifyAll();
}

33) Thread.sleep(1000) can be used in non-synchronized block too.
 
synchronized(LOCK) {  
    Thread.sleep(1000); // LOCK is held
}
3.1. Method called on
		wait() – Call on an object; current thread must synchronize on the lock object.
		sleep() – Call on a Thread; always currently executing thread.
3.2. Synchronized
		wait() – when synchronized multiple threads access same Object one by one.
		sleep() – when synchronized multiple threads wait for sleep over of sleeping thread.
3.3. Lock duration
		wait() – release the lock for other objects to have chance to execute.
		sleep() – keep lock for at least t times if timeout specified or somebody interrupt.
3.4. wake up condition
		wait() – until call notify(), notifyAll() from object
		sleep() – until at least time expire or call interrupt().
3.5. Usage
		sleep() – for time-synchronization
		wait() – for multi-thread-synchronization.

34) locks and monitor
	locks provide necessary support for implementing monitors. 
	
35) https://howtodoinjava.com/java/multi-threading/inter-thread-communication-using-piped-streams-in-java/

36) Lock interface: java.util.concurrent.lock.Lock
	
	Lock lock = new ReentrantLock();
	lock.lock();
 	//critical section
 	lock.unlock();
 	
 	* First a Lock is created. Then it’s lock() method is called. Now the Lock instance is locked. Any other thread calling lock() will be blocked until the thread that locked the lock calls unlock(). 
 	  Finally unlock() is called, and the Lock is now unlocked so other threads can lock it.


37) Difference between Lock Interface and synchronized keyword

	1) Having a timeout trying to get access to a synchronized block is not possible. Using Lock.tryLock(long timeout, TimeUnit timeUnit), it is possible.
	2) The synchronized block must be fully contained within a single method. A Lock can have it’s calls to lock() and unlock() in separate methods.  


