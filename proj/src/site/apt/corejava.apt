Core Java
---------

1) Can we overload main method or static method? Yes.

2) Can we override the static method or main method? No - method hiding only

3) Constructor returns a value but, what ?
	yes, that is current class instance (You cannot use return type yet it returns a value).

4) Can we create a program without main method ?
	Yes, one of the way is static block but in previous version of JDK not in JDK 1.7.
		In JDK7 and above, output will be:
		Output:Error: Main method not found in class A3, please define the main method as:
		public static void main(String[] args)

5) Why multiple inheritance is not supported in java ?
	To reduce the complexity and simplify the language, multiple inheritance is not supported in java.
	Diamond problem?

6) Why use aggregation(has-a relation) ?: code reusability

7) When use Aggregation?
	Code reuse is also best achieved by aggregation when there is no is-a relationship.
	Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.

8) What is covariant return type ?
	since Java5, it is possible to override method by changing the return type if subclass overrides any method whose return type is Non-Primitive but it changes its return type to subclass type.

9) Is final method inherited?
	Yes, final method is inherited but you cannot override it.

10) Can we initialize blank final variable?
	Yes, but only in constructor. For example:
	*A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.

11) Can we declare a constructor final?
	No, because constructor is never inherited.

12) will finally block executes after exit, break, return.
	finally executes in all senarios except exit which causes JVM failure/terminating the process. Also at power shutdown finally/OS failover wont executes.
	
13) How do you prevent for creating another instance of Singleton using clone() method?
	Dont implement Clonable interface or Override clone method and return same obj/ throw Exception.

14) How do you prevent for creating another instance of Singleton using reflection?
	private cunstructor can be called by using reflection. we throw Exception in constructor or return same obj.

15) How do you prevent for creating another instance of Singleton during serialization?
	You can prevent this by using readResolve() method, since during deserialization readObject() is used to create instance and 
	it return new instance every time but by using readResolve you can replace it with original Singleton instance.	


main mehtod allows final strictfp synchronized
	public static void main(String... args)
	public static final strictfp synchronized void main(String... args)


Usage of <static> keyword:
 1 variables
 2 methods
 3 block
 4 nested class
	
 * static method can not access non-static data members and methods directly.
 * static method can not use this and super keywords.


Usage of <this> keyword: refers to current class object.
 
  this.instanceVarible      ----- refers to current class variables
  this.instanceMethod()     ----- refers to current class instance method
  method(this)              ----- can be passed as method argument
  Constructor(this)         ----- can be passed as constructor argument
  this()                    ----- constructor-default
  return this;              ----- returns current class obj.


public class and non public class:
	source java file : MultipleClasses.java
	1) A source file can have any number of non-public classes.
	2) source file can have all non-public classes.
	3) source file have only one pubic class and that source file name too same.
	4) all class file can have main methods
		java A
		java B
		java MutlipleClasses will takes which mail method to calls.

 Inheritance:  One object/class acquires all the properties and behavior of parent object/class. code reusability and runtime polymorphism.
  
 1  IS-A relationship or parent-child relation: <a class extends other class>
	
 2  Aggregation or Has-A relation:If <a class has an entity reference> is known as Aggregation.
	
 3  Consist-A relation:If <a method/block has an entity reference>
 
	
 Types of Inheritance:
	 
 1  Single
 2  Multilevel
 3  Hierarchical
 4  Multiple(with interfaces)
 5  Hybrid(with interface)
		
 Method overloading: If a class has multiple methods having same name but different in parameters, it is known as method overloading.
 		Method Overloading is not possible by changing the return type of the method only because of ambiguity.
		<Compile Time Error is better than Run Time Error.> So, java compiler renders compiler time error if you declare the same method having same parameters inside a class.

 Method overriding: If subclass (child class) has the same method as declared in the parent class, it is known as method overriding. 
 		Method overriding is used to provide <specific implementation> of a method that is already provided by its super class & used for runtime polymorphism.
 		static, final and private methods can not be overridden.

 super keyword: <super> keyword is a reference variable which is used to refer <immediate parent class object>. 
 		Whenever we create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.

	super() : default constructor
 	super.instanceMethod()
 	super.instanceVariable;
	<super() is added in each class constructor automatically by compiler if there is no super()>
 	<if we want to call immediate parent call constructor it should be 1st statement inside current class constructor.>
 
Usage of <final> keyword: <final> keyword can be used at the following levels. 
 	variable ------ constants, can not be modified once initialized or assigned value at 1st time.
 	method   ------ can not be overridden in subclass.
 	class    ------ can not be inherited.

Polymorphism  It is a concept by which we can perform a single action by different ways.		
 
 1  Compile time polymorphism: Caller of the method is identified at compile time.
		Ex:  overloaded static methods
 2  Runtime polymorphism <(Dynamic Method Dispatch):>
		It is a process in which a call to an overridden method is resolved at runtime rather than compile-time.
		In this process, an overridden method is called through the reference variable of a superclass. 
		The determination of the method to be called is based on the object being referred to by the reference variable.
		<Method can be overridden not the datamembers, so runtime polymorphism can't be achieved by data members.>		

 Static Binding and Dynamic Binding:
		Connecting a method call to the method body is known as binding.
		There are two types of binding
	
 1  Static binding <(Early binding):>
		When type of the object is determined at compiled time(by the compiler), it is known as static binding. 
		If there is any <private, final or static method in a class>, there is static binding.
		
 2  Dynamic binding <(Late binding):>
		When type of the object is determined at run time, it is known as late binding. Overridden methods
	
 instanceof <type comparison operator> is used to test whether the object is an instance of the specified type (class or subclass or interface).
        Thread t = new Thread();
        Object o = new Object();
        String s = new String("Ravi");

        if (t instanceof Object)
        {
            System.out.println("t instanceof Object");
        }
        if (s instanceof Object)
        {
            System.out.println("s instanceof Object");
        }
        // if (s instanceof Thread)//C.E no relation between String and Thread
        // {
        // System.out.println("s instanceof Object");
        // }
        
        if (null instanceof Object)
        {
            System.out.println("null instanceof Object");
        }

 Downcasting When Subclass type refers to the object of Parent class, it is known as downcasting.
		If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime. 
		But if we use instanceof operator, downcasting is possible.

 Upcasting When Parent type refers to the object of child class, it is known as upcasting.

		Ex:
			Child c=new Child();
			Parent p=(Parent)c;                 Up casting

			Parent p = new Parent();			
			if(p instanceof Child)
			{
				c=(Child)p;						Down casting: actual object is child only. Upcasted then Down casted.
			}

 Abstraction It is a process of hiding the implementation details and showing only functionality to the user.
 		There are two ways to achieve abstraction.

 1  Abstract class (0 to 100%)
 		An abstract class can have data member, abstract method, concrete method, constructor and even main() method.

 2  Interface (100%)
		It is a blueprint of a class. It has static constants and abstract methods.
		It also represents IS-A relationship. Multiple inheritance is not supported in case of class because of ambiguity. 
		But it is supported in case of interface because there is no ambiguity as implementation is provided by the implementation class. 
		
		Marker interfacs< or >Tagged interface< :An interface that have no member.>
		They are used to provide some essential information to the JVM so that JVM may perform some useful operation.
		
		<Ex: Serializable, Cloneable, Remote etc.>
		
		If the JVM sees a Class is implementing the Serializable interface it does some special operation on it and writes the state of the object into object stream. 
		This object stream is then available to be read by another JVM. 
		
		If JVM finds that a class is implementing Clonnable interface, it performs some special operation in order to support cloning. 
		The same theory goes for RMI and Remote interface.
 
 		With the introduction of annotation, annotation has become a better choice over maker interface.
		In short a marker interface  is used to indicate something to compiler, JVM or any other tool but Annotation is better way of doing same thing.

 
 Access modifiers :
	1  private-variable,method,constructor
	2  default
	3  protected
	4  public

	private-> default-> protected-> public
	If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.
	
 Non-Access modifiers :
	1  static
	2  abstract
	3  synchronized
	4  native
	5  volatile
	6  transient ...etc


 
 Sample concurrent models:
 	
 	1) Parallel Workers: one theread will do full job as one worker. Delegator distributes the incoming jobs to different workers.
 	   workers are parallel, run in different threads and different processors/CPUs.
 	   + most commonly used model in java
 	   + concurrent utils are implemented this mode(java.util.concurrent)
 	   + Easy to understand.
 	   + Add workers to increase parallelization.
 	   
 	   - Shared state(memory/db) access is complex.
 	   - Job execution order is nondeterministic.
 	   
 	   Many data structures are implemented blocking algorithms. Means: one or a limited set of threads can access them at any given time. Non-blocking algorithms are hard to implement.
 	   
 	 2) Assembly Line/Shared nothing/Reactive/Event Driven System: The workers are organized like workers at an assembly line in a factory.
 	    Each worker only performs a part of the full job. When that part is finished the worker forwards the job to the next worker.
 	    Systems using the assembly line concurrency model are usually designed to use non-blocking IO.
 	    + No shared data
 	    + Stateful workers
 	    + Job ordering
 	    
 	    - Hard to identify which part of code is being executed
 	 
 	 3) Functional Parallelism: The basic idea of functional parallelism is implementing function calls.
 	    Java7: java.util.concurrent's ForkAndJoinPool: which helps us to implement something similar to functional parallism. 
 	    Java8: streams: which helps us to paralleize the iteration of large collection.
 	    
 	 4) Same-threading: A same-threaded system is not a pure single-threaded system, because it contains of multiple threads.
 	    But - each of the threads run like a single-threaded system.
 	    Same-threaded systems usually has 1 thread running per CPU in the computer. 
 	    If a computer contains 4 CPUs, or a CPU with 4 cores, then it would be normal to run 4 instances of the same-threaded system (4 single-threaded systems).
 	    The difference between a same-threaded and a multi-threaded system is that the threads in a same-threaded system do not share state.
 	    There is no shared memory which the threads access concurrently. No concurrent data structures etc.
 
 Thread: A single flow of execution.
 The problems arise when multiple threads access(writes) the same resources. 
 For instance the same memory (variables, arrays, or objects), systems (databases, web services etc.) or files.
 
 Thread creation:
 
 	0) Create built-in Thread class instance.
 	    Thread t=new Thread();
 		t.start();
 			 
 	1) By extendsing Thread class.

		class MyThreadByThread extends Thread
		{
    		public MyThreadByThread()
    		{
    		}
		    public MyThreadByThread(String name)
    		{
        		this.setName(name);
    		}
    		@Override
    		public void run()
    		{
        		System.out.println("Hellow world! MyThreadByThread by extending Thread class");
        		System.out.println(this.currentThread().getName());
        		System.out.println(Thread.currentThread().getName());
    		}
		}		

 		Thread t1 = new MyThreadByThread();
        t1.setName("ThreadByClass-One");
        t1.start();
 	
 	2) By implementing Runnable interface.
	
	2a)	Create Thread by implementing Runnable interface

 		class MyRunnableThread implements Runnable
		{
    		@Override
    		public void run()
    		{
	        	System.out.println("Hellow world! MyRunnableThread by implementing  Runnable interface");
		        System.out.println(Thread.currentThread().getName());
		    }
		}
		Thread myRunnable = new Thread(new MyRunnableThread());
        myRunnable.setName("ThreadByInterface-One");
        myRunnable.start();
 	
 	2b) Create Thread by implementing anonymous Runnable interface

        Thread myRunnable1 = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                System.out.println("This is anonymous implementation of Runnable interface new Thread(new Runnable(){ @Override public void run(){//business logic}}):");
            }
        });
        myRunnable1.setName("ThreadByInterface-OneA");
        myRunnable1.start();		 

 	
 	2c) Create Thread by implementing lambda expression Runnable interface

        Thread myRunnable2 = new Thread(()-> {System.out.println("This is lambda implementation of Runnable interface new Thread(()->{//business logic}):");});
        myRunnable2.setName("ThreadByInterface-OneB");
        myRunnable2.start();
 	
 	
 	3) By implementing Callable interface and ExecutorService pool=Executors.newFixedThreadPool(10);
 		
 		Future ftr=pool.submit(new MyCallable());
 		
 		pool.execute(new MyRunnableThread());
 		executor.shutdown();
        while (!pool.isTerminated()) {
        }
        System.out.println("Finished all threads");
 	
 	   
 
ExecutorService is an interface: used to create pool of threads and submit callable or execute runnable or schedule callable/runnable threads.

	1a) ExecutorService singleThreadExecutorService = Executors.newSingleThreadExecutor();
	1b) ExecutorService fixedThreadPoolExecutorService=Executors.newFixedThreadPool(5);
	
	2a) ExecutorService cashedThreadPoolExecutorService=Executors.newCachedThreadPool();
	
	ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);
	scheduledExecutorService.schedule(()->{"System.out.println("Callable interface");});
	
	3a) ScheduledFuture<?> scheduledFuture1 = Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new MyRunnable(), 2, 1, TimeUnit.SECONDS);
	3b) ScheduledFuture<?> schesuledThreadPoolFuture1 = Executors.newScheduledThreadPool(5).scheduleAtFixedRate(new MyRunnable(), 2, 1, TimeUnit.SECONDS);

	4a) ExecutorService workStealingPool=Executors.newWorkStealingPool();
	4b) ExecutorService workStealingPoolN=Executors.newWorkStealingPool(5);
	
	singleThreadExecutorService.execute(-);
	singleThreadExecutorService.submit(-);
	
 

 An application may process one task at at time (sequentially) or work on multiple tasks at the same time (concurrently)
 
 An application may process the task serially from start to end, or split the task up into subtasks which can be completed in parallel.

 Race Condition: The situation where two threads compete for the same resource, where the sequence in which the resource is accessed is significant, is called race conditions.
 
 Critical Section: A code section that leads to race conditions is called a critical section.
 
 
 //Sample code for Critical Section:
 
   public class Counter 
   {
		protected long count = 0;
		public void add(long value)
		{
			this.count = this.count + value;
		}
   }


 Preventing Race Conditions: To prevent race conditions from occurring you must make sure that the critical section is executed as an atomic instruction. 
	That means that once a single thread is executing it, no other threads can execute it until the first thread has left the critical section.  
	By using <synchronized blocks> or <synchronized methods> 
 
 

 
 Sample code for Preventing Critical Section:
   
   public class TwoSums 
   {
    private int sum1 = 0;
    private int sum2 = 0;
      public void add(int val1, int val2)
      {
        synchronized(this)
        {
            this.sum1 += val1;   
        }
        synchronized(this)
        {
            this.sum2 += val2;
        }
      }
	}
	

 
  <Code that is safe to call by multiple threads simultaneously is called thread safe.>

 Local Variables: Local variables are stored in each thread's own stack. 
	That means that local variables are never shared between threads.
	
 Local Object Reference: All objects are stored in the shared heap.
	If an object created locally never escapes the method it was created in, it is thread safe. 
	In fact you can also pass it on to other methods and objects as long as none of these methods or objects make the passed object available to other threads.	

 Thread Safety and Immutability: Race condition <occurs> when two or more threads <writes> to shared resource[s].
	Race condition can <not occur> when two or more threads <reads> shared resource.
	We can make sure that objects shared between threads are never updated by any of the threads by making the shared objects immutable, and thereby thread safe.
	





Problems With Threads while accessing shared resources:

Visibility and Race condition on shared variables.:
If two or more threads acccesing shared resources/objects/variable: updated value of shared resource may not be visible to all thereds.
Solution: We can avoid visibility and race condition issues by declaring volatile keyword and synchronized blocks/methods.
The volatile keyword can make sure that a given variable is read directly from main memory, and always written back to main memory when updated.
A synchronized block guarantees that only one thread can enter a given  critical section of the code at any given time.
Synchronized blocks also guarantee that all variables accessed inside the synchronized block will be read in from main memory,
and when the thread exits the synchronized block, all updated variables will be flushed back to main memory again, 
regardless of whether the variable is declared volatile or not.


 Synchronized keyword: A Java synchronized block marks a method or a block of code as synchronized. Java synchronized blocks can be used to avoid race conditions.
	The synchronized keyword can be used to mark four different types of blocks. 

+--------------------+ 
1. Instance methods
2. Static methods
3. Code blocks inside instance methods
4. Code blocks inside static methods
+--------------------+ 

 synchronized instance method: we can make an instance method synchronized by declaring a method with synchronized keyword as follow. 
   this can be synchronized on <instance(object)>. Only one thread can execute inside the synchronized method at a time.
  
+-----------------+
public synchronized void add(int value)
{
	this.count=+value;
}
+-----------------+

 synchronized static method: Synchronized static methods are synchronized on the class object of the class the synchronized static method belongs to. 
   Since only one class object exists in the Java VM per class, only one thread can execute inside a static synchronized method in the same class.
  
+-----------------+
public static synchronized void add(int value)
{
	count=+value; 
}
+-----------------+

 Synchronized Blocks in Instance Methods: it is preferable to synchronize only part of a method.
  The object taken in the parentheses by the synchronized construct is called a monitor object. The code is said to be synchronized on the monitor object. 
  A synchronized instance method uses the object it belongs to as monitor object.

+-----------------+
public void add(int value)
{
	synchronized(this)
	{
		this.count=+value;
	}
}
+-----------------+

	 Synchronized Blocks in static Methods: static synchronized block been synchronized on a different object than MyClass.class, 
	  then one thread could execute inside each method at the same time.

+-----------------+
public class MyClass 
{
	public static void add(int value)
	{
		synchronized(MyClass.class)
		{
			this.count=+value;
		}
	}
}
+-----------------+	

 
 volatile is Not Always Enough
 
 Even if the volatile keyword guarantees that all reads of a volatile variable are read directly from main memory, and all writes to a volatile variable are 
 written directly to main memory, there are still situations where it is not enough to declare a variable volatile.
 
 When is volatile Enough?
  
  if two threads are both reading and writing to a shared variable, then using the volatile keyword for that is not enough. 
  
  i   We can use synchronization which makes the reading and writing of the variable is atomic.
  
  ii  We can also use one of the many atomic data types found in the java.util.concurrent package. < AutomicLong , AutomicReference...>
  
 
  Performance Considerations of volatile

  Reading and writing of volatile variables causes the variable to be read or written to main memory. Reading from and writing to main memory is more expensive than accessing the CPU cache.
  We should only use volatile variables when you really need to enforce visibility of variables.
 
  <ThreadLocal :
 The ThreadLocal class in Java enables you to create variables that can only be read and written by the same thread. 
 Thus, even if two threads are executing the same code, and the code has a reference to a ThreadLocal variable, 
 then the two threads cannot see each other's ThreadLocal variables.

+---------+
 private ThreadLocal<Integer> threadLocal=new ThreadLocal<>();
 
 System.out.println(Thread.currentThread().getName());
 threadLocal.set((int)(Math.random()*100));
 
 System.out.println(Thread.currentThread().getName());
 System.out.println(threadLocal.get());
+---------+ 

 <The InheritableThreadLocal class is a subclass of ThreadLocal. Instead of each thread having its own value inside a ThreadLocal, the InheritableThreadLocal grants access to values to a thread and all child threads created by that thread.>
 
  Java has a builtin wait mechanism that enable threads to become inactive while waiting for signals. The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this.
 
 <Thread that calls wait() on any object becomes inactive until another thread calls notify() on that object.  the calling thread must call wait() or notify() from inside a synchronized block.>
 
 A thread cannot call wait(), notify() or notifyAll() without holding the lock on the object the method is called on. If it does, an IllegalMonitorStateException is thrown.
 Once a thread calls wait() it releases the lock it holds on the monitor object.
 
 Thread Deadlock A deadlock is when two or more threads are blocked waiting to obtain locks that some of the other threads in the deadlock are holding.
 Ex: if thread 1 locks A, and tries to lock B, and thread 2 has already locked B, and tries to lock A, a deadlock arises. Thread 1 can never get B, and thread 2 can never get A.

+-----------+
Thread 1  locks A, waits for B
Thread 2  locks B, waits for A
+-----------+
 
 
 
 Deadlock Prevention:
 	
 	1  Lock Ordering:
 	
 	2  Lock Timeout:
 	
 	3  Deadlock Detection :

 Starvation: If a thread is not granted CPU time because other threads grab it all, it is called "starvation".
	 The solution to starvation is called fairness - that all threads are fairly granted a chance to execute.

  A simple implementation of the Lock class could look like this: but it is not reentrant lock
 
 +-------+
public class Lock{
  private boolean isLocked      = false;
  private Thread  lockingThread = null;

  public synchronized void lock() throws InterruptedException{
    while(isLocked){
      wait();
    }
    isLocked      = true;
    lockingThread = Thread.currentThread();
  }

  public synchronized void unlock(){
    if(this.lockingThread != Thread.currentThread()){
      throw new IllegalMonitorStateException(
        "Calling thread has not locked this lock");
    }
    isLocked      = false;
    lockingThread = null;
    notify();
  }
}
 +-------+

<To increase the fairness, use locks instead of synchronized blocks. the following is not reentrant lock>

 +------------+
 
class Lock
{
    private boolean isLocked = false;

    public synchronized void lock() throws InterruptedException
    {
        while (isLocked)
        {
            wait();
        }
        isLocked = true;
    }

    public synchronized void unlock()
    {
        isLocked = false;
        notify();
    }
}
 
public class Synchronizer
{
  Lock lockObj = new Lock();//it is not built-in class, ||y implementation of Lock interface

  public void doSynchronized() throws InterruptedException
  {
    this.lockObj.lock();---------->lock
    try
    {
    	//critical section, do a lot of work which takes a long time
    }
    catch(Exception e)
    {
    	
    }
    finally
    {
    	this.lockObj.unlock();//recommended to unlock in finally block.
    }
  }
}
 +------------+ 

 Reentrant means that a thread that already holds a lock can retake it. Java's synchronized blocks are reentrant. 
 
 +---------------+
 
 public class Reentrant{

  public synchronized outer(){
    inner();
  }

  public synchronized inner(){
    //do something
  }
}

 +---------------+
 
 Notice how both outer() and inner() are declared synchronized, which in Java is equivalent to a synchronized(this) block. 
 If a thread calls outer() there is no problem calling inner() from inside outer(), since both methods (or blocks) are synchronized on the same monitor object ("this"). 
 If a thread already holds the lock on a monitor object, it has access to all blocks synchronized on the same monitor object. This is called reentrance.
 		

+------------------+

public class ReentrantCustomLock
{
    private boolean isLocked = false;
    private Thread lockedThread = null;
    private int lockCount = 0;

    public synchronized void lock() throws InterruptedException
    {
        Thread callingThread = Thread.currentThread();
        while (isLocked && lockedThread != callingThread)
        {
            wait();
        }
        isLocked = true;
        lockCount++;
        lockedThread = callingThread;
    }

    public synchronized void unlock()
    {
        if (Thread.currentThread() == lockedThread)
        {
            lockCount--;
            if (lockCount == 0)
            {
                isLocked = false;
                notify();
            }
        }
        else
        {
            throw new IllegalMonitorStateException("Calling thread is not accuaired lock.");
        }
    }
}

IN-00215030/Users/edurvas/OneDrive%20-%20Ericsson%20AB/backup/CUS/Onboard_Material

Decompiler:CFR

C:\Users\zgorrav\codebase\dev-repo\proj\corejava\target\classes\java8features\functionalinterface>java -jar C:\tools\cfr_0_129.jar LambdaExpForCustomInterface.class

