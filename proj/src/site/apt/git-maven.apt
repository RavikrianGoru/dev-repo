													-----
													Title: maven site documentation (Frequently used Git and Maven commands) 
													-----
													Author:RavikiranGoru,... 
													-----
													Date: 2017-09-05
													-----


Git and GitHub
~~~~~~~~~~~~~~
  Git is a version control system.
  GitHub is a website to host your code with version control system.

Problems

--------------------

 1) No version control
 2) No centralized storage. if HD fails data would be lost.
 3) Difficult to do collaborative work.

--------------------
  
Solutions

-------------------- 

 1) Code is stored in cloud.
 2) different tools are there for merging, conflict resolving.
 3) versional are controlled.  

--------------------
 
 Here, we will update frequently used Git and Maven commands. If we create a repository in GitHub without README file and git ignore files then we need to follow the below steps.  
  Create a repository in GitHub(WebSite) without readme and gitignore files ex: tmpRepo
 
* Create a new repository on the command line

* Syntax:

--------------------------------
 1	mkdir tmpRepo
 2	cd tmpRepo
 3	touch tmp.txt
 4	git init
 5	git add tmp.txt
 6	git commit -m "added empty file tmp.txt"
	Push an existing repository from the command line
 7	git remote add origin https://github.com/RavikrianGoru/tmpRepo.git
 8	git push -u origin master
--------------------------------

* Frequently used git commands

---------------------------------
 1	clone git repository from github : copy the https clone link.
	git clone https://github.com/RavikrianGoru/dev-repo.git
		
 2	check git status
	git status
 
 3	stage your changes(files)
	git add <file or files separated by space)
 	git add .
 	
 4	commit the staged files
	git commit -m "commit message"
 
 5	transfer your commits into git account(when you execute the following cmd 1st time it will ask github credentials)
	git push -u origin master
	git push origin HEAD:refs/for/master
 	git push
 	
 6	git log command: it will give all commit logs
	git log
 
 7	git commit ammend: updated the latest changes with previous commit
	git commit --amend
 
 8	git pull rebase: it is like update the local code from repository
	git pull --rebase
	git pull origin master
 
 9	git checkout file: undo uncommited changes. it will override the local file with remote file. So local changes will be gone.
	git checkout <file>
	git checkout -- <fileName or directory>
	git checkout -- .
 
 10	Shows diff between files (local) and repo fils.
	git diff 
	git diff fileName
 
 11	Checkout code form specific branch and push the code into that branch Ex: branch=1.18
	git branch -v -a
	git checkout release/1.18
	git add <fileName>
	git commit -m "msg"
	git push origin HEAD:refs/for/release/1.8	

 12	Stash your local code changes, update your code with repo and then apply your local changes.
	do some local file changes
	git status
	git stash save s1
	git stash list
	Saved working directory and index state On master: s1
	git status
	git pull origin master
	git apply s1
 	
	or
	 	
	git stash
	git stash apply
	 	
 13	Undo uncommited changes
	git stash
	git stash drop
 
 14	This will unstage all files you might have staged with git add:
	git reset
 
 15	This will revert all local uncommitted changes (should be executed in repo root):
	git checkout .
 
 16	You can also revert uncommitted changes only to particular file or directory:
	git checkout [some_dir|file.txt]
 
 17	Yet another way to revert all uncommitted changes (longer to type, but works from any subdirectory):
	git reset --hard HEAD
 
 18	This will remove all local untracked files, so only git tracked files remain:
	git clean -fdx
    
	WARNING: -x will also remove all ignored files!
 
 19	To sum it up: executing commands below is basically equivalent to fresh git clone from original source (but it does not re-download anything, so is much faster):
    
	git reset
	git checkout .
	git clean -fdx

 20	To see the diff changes with previous version
    
	git difftool HEAD

 21	Revert committed changes by commit Id with additional commit.
	git log
	git revert <commitId> 	  	
	
	Revert committed changes by commit Id without additional commit. it shows changes as modified files.
	git revert -n <commitId>
	git commit -m "msg"
	
 22	Switch branch
 	git checkout master
 	git checkout <branchName>
 	
 23	Merge one branch in master
 	Do changes in branch and commit the code changes in that branch(push).
 	
 	git checkout master
 	git merge <branchName>
 
 24	Delete branch
 	git branch
	git checkout -b dummy
	git branch -d dummy
	
 25	Used Meld tool for diff and merge
 	git difftool origin/master
	git difftool
	git difftool -t vimdiff
	git difftool -t meld
	default difftool is vimdiff	
	git mergetool
	
---------------------------------------
 	 
HEAD

	HEAD is a reference to the most recent commit in the current branch.(in most of cases).

-----------
	git log
	git show HEAD

	git checkout commitId
	git checkout master
-----------	

Meld tool for diff and merge the code:

	Download and install Meld tool.
	open .gitconfig file add the following lines.

-----------
	[diff]
	tool = meld
	[difftool "meld"]
	path = C:/Program Files/Meld/meld/meld.exe
	[difftool]
	prompt = false
	
	[merge]
	tool = meld
	[mergetool "meld"]
	path = C:/Program Files/Meld/meld/meld.exe
	[mergetool]
	keepBackup = false	
----------
 	
* Other Git commands

---------------------------------
	git remote
	git remote -v
	git branch
	git branch -v
	scp -p -P 29418 .....hooks/commit-msg .git/hooks/
	git reset HEAD <fileName>
	git log
	git reset <filename>
	git reset --hard <commit id>
	git rm -r <file or dir> remove file or folders
	git checkout --<filename> undo your changes.
	git rm --cached <filename>
	
	git mergetool <fileName>
	git cherry-pick --continue
	
---------------------------------	

* Frequently used Maven commands

---------------------------------

 1	mvn --version

 2	mvn clean
 
 3	mvn install
 
 4	mvn clean install
 
 5	mvn site:site -rf :<proj>
 
 6	mvn site:site -rf .
 
 7	mvn eclipse:eclipse
 
 8	mvn clean install -DskipTests=true -Djavadoc.skip=true
 
 9	mvn -pl '!module/sub-module' clean install
 	use single quotes or double quotes it depends on OS environment
 	
 10	mvn -pl "!submodule1,!submodule2" install
 	use single quotes or double quotes it depends on OS environment
 	
 11	mvn -pl '!integration/swrecord' clean install -DskipTests=true -Djavadoc.skip=true
 
 12 mvn dependency:tree
 
 13 git difftool HEAD
 
 
--------------------------------

